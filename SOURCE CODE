class CleanupTask:
    def _init_(self, task_id, description, location, assigned_to=None):
        self.task_id = task_id
        self.description = description
        self.location = location
        self.assigned_to = assigned_to
        self.completed = False

    def mark_complete(self):
        self.completed = True

    def _repr_(self):
        return f"Task({self.task_id}, {self.description}, {self.location}, Assigned to: {self.assigned_to}, Completed: {self.completed})"
class CleanupCoordinator:
    def _init_(self):
        self.tasks = {}  # Using a dictionary to store tasks by their IDs

    def add_task(self, task):
        self.tasks[task.task_id] = task

    def get_task(self, task_id):
        return self.tasks.get(task_id)

    def update_task(self, task_id, description=None, location=None, assigned_to=None):
        task = self.get_task(task_id)
        if task:
            if description:
                task.description = description
            if location:
                task.location = location
            if assigned_to:
                task.assigned_to = assigned_to

    def delete_task(self, task_id):
        if task_id in self.tasks:
            del self.tasks[task_id]

    def list_tasks(self):
        return list(self.tasks.values())

    def mark_task_complete(self, task_id):
        task = self.get_task(task_id)
        if task:
            task.mark_complete()

    def track_cleanup(self):
        completed_tasks = [task for task in self.tasks.values() if task.completed]
        pending_tasks = [task for task in self.tasks.values() if not task.completed]
        return {
            "completed_tasks": completed_tasks,
            "pending_tasks": pending_tasks
        }
if _name_ == "_main_":
    coordinator = CleanupCoordinator()

    # Creating tasks
    task1 = CleanupTask(task_id=1, description="Pick up trash", location="Stadium Entrance")
    task2 = CleanupTask(task_id=2, description="Clean restrooms", location="West Wing")

    # Adding tasks
    coordinator.add_task(task1)
    coordinator.add_task(task2)

    # Listing tasks
    print("All Tasks:")
    for task in coordinator.list_tasks():
        print(task)

    # Updating a task
    coordinator.update_task(1, assigned_to="John Doe")
    coordinator.update_task(2, assigned_to="Karna")

    # Marking a task complete
    coordinator.mark_task_complete(1)
    coordinator.mark_task_complete(2)

    # Tracking cleanup status
    status = coordinator.track_cleanup()
    print("\nCleanup Status:")
    print("Completed Tasks:", status["completed_tasks"])
    print("Pending Tasks:", status["pending_tasks"])

    # Deleting a task
    coordinator.delete_task(1)
    coordinator.delete_task(2)

    print("\nTasks after deletion:")
    print(coordinator.list_tasks())
